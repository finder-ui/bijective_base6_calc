{
    "pageTitle": "מחשבון ומגלה מערכות ספירה ביאקטיבית בבסיס 6",
    "pageDescription": "כלי חינוכי אינטראקטיבי לחישוב ולחקירת מערכת הספירה הביאקטיבית בבסיס 6, שאין בה אפס. כולל ממיר בזמן אמת וטבלאות עזר.",
    "mainTitle": "מחשבון ומגלה מערכות ספירה ביאקטיבית בבסיס 6",
    "tabCalculator": "מחשבון",
    "tabTables": "טבלאות עזר",
    "tabProsCons": "יתרונות וחסרונות",
    "tabLearn": "למידה",
    "tabPractice": "תרגול",
    "calculatorTitle": "מחשבון מתמטי ביאקטיבי",
    "calculatorDesc": "הזן שני מספרים במערכת הספירה הביאקטיבית בבסיס 6 כדי לראות את התוצאות של כל הפעולות המתמטיות הסטנדרטיות.",
    "num1Placeholder": "מספר ראשון",
    "num2Placeholder": "מספר שני",
    "calculateBtn": "חשב את כל הפעולות",
    "resultsTitle": "תוצאות",
    "liveConverterTitle": "ממיר מערכות ספירה חי",
    "liveConverterDesc": "הזן מספר עשרוני רגיל כדי לראות את ייצוגו בזמן אמת במערכות שונות.",
    "decimalInputLabel": "הזן מספר עשרוני:",
    "decimalInputPlaceholder": "לדוגמה, 43",
    "additionTableTitle": "טבלת חיבור (1 עד 24)",
    "multiplicationTableTitle": "טבלת כפל (1 עד 24)",
    "explanationTitle": "הבנת המערכת הביאקטיבית",
    "explanationDesc1": "מערכת זו היא <strong>מערכת ספירה ביאקטיבית בבסיס 6</strong>. היא מערכת מיקום, אך עם שני הבדלים עיקריים: אין לה אפס, והספרות שלה נעות בין 1 ל-6. מכיוון שאין אפס שישמש כמציין מקום, המערכת 'מתגלגלת' בצורה שונה. אחרי <code>6</code>, המספר הבא הוא <code>11</code>.",
    "algoTitle": "הסבר על אלגוריתם ההמרה",
    "algoDesc1": "הטריק להמרה ממערכת עשרונית לביאקטיבית בבסיס 6 הוא להזיז זמנית את מערכת המספרים. מחשבים עובדים באופן טבעי עם שאריות מ-0 עד 5, אך הספרות שלנו הן מ-1 עד 6. אנו מגשרים על פער זה על ידי חיסור 1 לפני כל חישוב.",
    "visualizerTitle": "ממחיש אלגוריתם",
    "visualizerDesc": "הזן מספר עשרוני כדי לראות את אלגוריתם ההמרה בפעולה.",
    "visualizerInputPlaceholder": "הזן עשרוני להמחשה...",
    "visualizeBtn": "המחשה",
    "formalLangTitle": "המתמטיקה מאחורי הקסם: קשר לתורת השפות הפורמליות",
    "formalLangDesc1": "למערכת הביאקטיבית בבסיס 6 יש קשר עמוק ויפהפה לתורת השפות הפורמליות, אבן יסוד במדעי המחשב התיאורטיים.",
    "formalLangDesc2": "בתחום זה, אנו מגדירים אלפבית, סיגמא, כקבוצה של סמלים. עבור המערכת שלנו, האלפבית הוא סיגמא = {1, 2, 3, 4, 5, 6}.",
    "formalLangDesc3": "קבוצת כל המחרוזות האפשריות שניתן ליצור באמצעות אלפבית זה ידועה ככוכב קלין (או סגור קלין) של סיגמא, ומסומנת כ-Sigma*. קבוצה זו כוללת מחרוזות בכל אורך סופי: {מחרוזת ריקה, 1, 2, ..., 6, 11, 12, ..., 66, 111, ...}.",
    "formalLangDesc4": "המערכת הביאקטיבית בבסיס 6 היא למעשה מנייה מושלמת ומסודרת של כוכב קלין של האלפבית {1, 2, 3, 4, 5, 6}, אם אנו ממפים את המחרוזת הריקה לאפס. כל מספר שלם חיובי מתאים בדיוק למחרוזת אחת, וכל מחרוזת מתאימה בדיוק למספר שלם חיובי אחד. זה חזק להפליא מכיוון שהוא מספק דרך חלקה להקצות מספר ייחודי לכל רצף של אירועים או בחירות מתוך קבוצה של שש, פעולה בסיסית באלגוריתמים ובתורת החישוביות.",
    "geomTitle": "פרשנות גיאומטרית: עץ ה-6-ארי האינסופי",
    "geomDesc1": "אנו יכולים לדמיין את המערכת כולה כעץ 6-ארי שלם ואינסופי. עץ 6-ארי הוא מבנה שבו לכל צומת יש בדיוק שישה ילדים.",
    "geomDesc2": "ניתן לחשוב על שורש העץ כנקודת התחלה (המייצגת את המספר 0 או את המחרוזת הריקה).",
    "geomList": [ "הרמה הראשונה של הצמתים מסומנת 1, 2, 3, 4, 5 ו-6.", "לכל אחד מהצמתים הללו יש שישה ילדים. לדוגמה, צומת \"1\" הוא ההורה של הצמתים \"11\", \"12\", \"13\", \"14\", \"15\" ו-\"16\"." ],
    "geomDesc4": "במודל זה, כל מספר ביאקטיבי בבסיס 6 הוא ה\"כתובת\" או ה\"נתיב\" הייחודי מהשורש לצומת ספציפי. לדוגמה, המספר 425 פירושו:",
    "geomPathList": [ "התחל מהשורש.", "קח את הענף הרביעי.", "מאותו צומת, קח את הענף השני.", "מאותו צומת, קח את הענף החמישי." ],
    "hashingTitle": "הערה על התנגשויות וגיבוב",
    "hashingDesc": "התבוננות בטבלת הכפל מגלה ש-<code>2 × 3 = 6</code> וגם <code>1 × 6 = 6</code>. זוהי <strong>התנגשות</strong>. למרות שזה מעניין מבחינה מתמטית, תכונה זו הפוכה ממה שרצוי בפונקציות גיבוב קריפטוגרפיות (כמו SHA-256), אשר חייבות להיות מתוכננות במיוחד כדי להפוך את מציאת ההתנגשויות לבלתי אפשרית מבחינה חישובית. לכן, מערכת זו היא כלי טוב להבנת מושג ההתנגשויות, אך אינה אלגוריתם גיבוב מאובטח בעצמה.",
    "prosTitle": "יתרונות של בסיס 6 ביאקטיבי",
    "prosIntro": "העובדה שמערכת זו אינה מכילה אפס מעניקה לה מספר יתרונות ייחודיים, במיוחד בתחום המחשוב ומזהים קריאים לאדם.",
    "pros": [
        { "title": "חד-משמעי וידידותי לאדם", "desc": "אין אפסים מובילים, מה שאומר שאין בלבול. <code>123</code> הוא תמיד <code>123</code>, לעולם לא <code>0123</code>. זה אידיאלי עבור קודי מוצר, מספרים סידוריים, או קישורים מקוצרים שבהם הבהירות היא קריטית." },
        { "title": "קומפקטי ויעיל", "desc": "כל רצף ספרות אפשרי הוא מספר חוקי, מה שהופך את המערכת לדרך צפופה ויעילה מאוד לייצוג נתונים. אין צירופים מבוזבזים או לא חוקיים." },
        { "title": "התאמה טבעית למחשוב", "desc": "ההתאמה החד-חד ערכית אידיאלית לאלגוריתמים הדורשים מזהים ייחודיים, כמו אינדקס של מבני נתונים מורכבים או יצירת מפתחות במערכות מבוזרות." },
        { "title": "מקבילה למערכות ללא Null", "desc": "הרעיון שכל מחרוזת היא מספר חוקי מציע הקבלה מעניינת למטרה של תכנות מודרני לבטל הפניות null. מכיוון שאין ייצוג 'ריק' או 'null', זה מספק דרך מוחשית לחשוב על מערכות שבהן כל מצב הוא חוקי, רעיון מפתח בבניית תוכנה חזקה יותר." },
        { "title": "ספירה אינטואיטיבית בטווח גבוה עם האצבעות", "desc": "בעוד שספירה בינארית באצבעות מאפשרת לספור עד 1023, היא יכולה להיות מופשטת. בסיס 6 ביאקטיבי מציע שיטה אינטואיטיבית יותר לספור מעל 10. על ידי שימוש ביד אחת לספרות 1-6 (למשל, אגרוף עבור 6) והשנייה למעקב אחר 'גלישות', ניתן לייצג בקלות מספרים עד 42 באופן שקל יותר להמחיש ולעקוב אחריו עבור אנשים רבים." }
    ],
    "consTitle": "חסרונות ופשרות",
    "consIntro": "למרות עוצמתה, המערכת אינה בשימוש נרחב לאריתמטיקה כללית מכמה סיבות עיקריות.",
    "cons": [
        { "title": "אריתמטיקה לא מוכרת", "desc": "כללי הנשיאה וההשאלה בחיבור וחיסור שונים מהמערכת העשרונית, מה שהופך חישובים בראש וחישובים ידניים למאתגרים עבור רוב האנשים." },
        { "title": "תקורה של המרה", "desc": "זו אינה מערכת טבעית למחשבים (המשתמשים בבינארי) או לבני אדם (המשתמשים בעשרוני). תמיד נדרש שלב המרה בעת התממשקות עם מערכות אחרות, מה שמוסיף תקורה חישובית." },
        { "title": "תמיכה מוגבלת בספריות", "desc": "מעט מאוד שפות תכנות או ספריות סטנדרטיות כוללות פונקציות מובנות לספירה ביאקטיבית. משמעות הדבר היא שמפתחים צריכים לממש לוגיקה מותאמת אישית עבור כל פעולות האריתמטיקה וההמרה." },
        { "title": "דפוסי כפל מורכבים", "desc": "בניגוד לבסיסים סטנדרטיים שבהם הכפלה בבסיס פשוט מוסיפה אפס, הדפוסים בכפל ביאקטיבי פחות אינטואיטיביים, מה שמקשה על ביצוע הערכות או חישובים מהירים." }
    ],
    "practiceTitle": "מצב תרגול",
    "practiceDesc": "בחנו את כישוריכם נגד השעון! בחרו רמת קושי ופתרו את התרגילים.",
    "difficultyLabel": "רמת קושי:",
    "difficultyEasy": "קל",
    "difficultyMedium": "בינוני",
    "difficultyHard": "קשה",
    "quizQuestion": "מהו",
    "quizTypeConversion": "המרות",
    "quizTypeMath": "חשבון",
    "quizQuestionConversionSuffix": "בבסיס 6 ביאקטיבי?",
    "quizAnswerPlaceholder": "התשובה שלך...",
    "quizSubmitBtn": "הגש",
    "quizCorrectFeedback": "נכון! 🎉",
    "quizIncorrectFeedback": "לא בדיוק! התשובה הנכונה הייתה",
    "quizNextBtn": "שאלה הבאה",
    "timeLabel": "זמן:",
    "githubLink": "קוד המקור של הפרויקט זמין ב-",
    "licenseLink": "שוחרר תחת רשיון",
    "ui_loading": "טוען...",
    "errorBothNumbers": "אנא הזן את שני המספרים.",
    "errorGeneric": "שגיאה:"
}
