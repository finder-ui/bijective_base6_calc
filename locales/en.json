{
    "pageTitle": "Bijective Base-6 Calculator & Explorer",
    "pageDescription": "An interactive educational tool to calculate and explore the bijective base-6 number system. Features interactive tools, reference tables, and a practice mode.",
    "mainTitle": "Bijective Base-6 Calculator & Explorer",
    "tabCalculator": "Calculator",
    "tabTables": "Reference Tables",
    "tabProsCons": "Pros & Cons",
    "tabLearn": "Learn",
    "tabPractice": "Practice",
    "liveConverterTitle": "Live Numeral System Explorer",
    "liveConverterDesc": "Enter a standard decimal number to see its real-time representation across different systems.",
    "decimalInputLabel": "Enter a Decimal Number:",
    "decimalInputPlaceholder": "e.g., 43",
    "calculatorTitle": "Bijective Math Calculator",
    "calculatorDesc": "Enter two bijective base-6 numbers to see the results for all operations.",
    "num1Placeholder": "First number",
    "num2Placeholder": "Second number",
    "calculateBtn": "Calculate All Operations",
    "resultsTitle": "Results",
    "additionTableTitle": "Addition Table (1 to 24)",
    "multiplicationTableTitle": "Multiplication Table (1 to 24)",
    "explanationTitle": "Understanding the Bijective System",
    "explanationDesc1": "This system is a <strong>bijective base-6 numeration</strong>. It is positional, but with two key differences: it has no zero, and its digits run from 1 to 6. After <code>6</code>, the next number is <code>11</code>.",
    "algoTitle": "The Conversion Algorithm Explained",
    "algoDesc1": "The trick to converting from decimal to bijective base-6 is to temporarily shift the number system. Computers naturally work with remainders from 0 to 5, but our digits are 1 to 6. We bridge this gap by subtracting 1 before each calculation.",
    "visualizerTitle": "Algorithm Visualizer",
    "visualizerDesc": "Enter a decimal number to see the conversion algorithm in action.",
    "visualizerInputPlaceholder": "Enter decimal to visualize...",
    "visualizeBtn": "Visualize",
    "formalLangTitle": "The Math Behind the Magic: A Link to Formal Language Theory",
    "formalLangDesc1": "The bijective base-6 system has a deep and beautiful connection to formal language theory, a cornerstone of theoretical computer science.",
    "formalLangDesc2": "In this field, we define an alphabet, Sigma, as a set of symbols. For our system, the alphabet is Sigma = {1, 2, 3, 4, 5, 6}.",
    "formalLangDesc3": "The set of all possible strings that can be created using this alphabet is known as the Kleene star (or Kleene closure) of Sigma, denoted as Sigma*. This set includes strings of any finite length: {empty string, 1, 2, ..., 6, 11, 12, ..., 66, 111, ...}.",
    "formalLangDesc4": "The bijective base-6 system is essentially a perfect, ordered enumeration of the Kleene star of the alphabet {1, 2, 3, 4, 5, 6}, if we map the empty string to zero. Every positive integer corresponds to exactly one string, and every string corresponds to exactly one positive integer. This is incredibly powerful because it provides a seamless way to assign a unique number to any sequence of events or choices from a set of six, a fundamental operation in algorithms and computability theory.",
    "geomTitle": "A Geometric Interpretation: The Infinite 6-ary Tree",
    "geomDesc1": "We can visualize the entire system as an infinite, complete 6-ary tree. A 6-ary tree is a structure where every node has exactly six children.",
    "geomDesc2": "The root of the tree can be thought of as a starting point (representing the number 0 or the empty string).",
    "geomList": [ "The first level of nodes are labeled 1, 2, 3, 4, 5, and 6.", "Each of those nodes has six children. For example, node \"1\" is the parent of nodes \"11\", \"12\", \"13\", \"14\", \"15\", and \"16\"." ],
    "geomDesc4": "In this model, every bijective base-6 number is the unique \"address\" or \"path\" from the root to a specific node. For example, the number 425 means:",
    "geomPathList": [ "Start at the root.", "Take the 4th branch.", "From that node, take the 2nd branch.", "From that node, take the 5th branch." ],
    "hashingTitle": "A Note on Collisions and Hashing",
    "hashingDesc": "Observing the multiplication table reveals that <code>2 Ã— 3 = 6</code> and <code>1 Ã— 6 = 6</code>. This is a <strong>collision</strong>. While interesting mathematically, this property is the opposite of what is desired in cryptographic hashing functions (like SHA-256), which must be specifically designed to make finding collisions computationally infeasible. This system, therefore, is a good tool for understanding the concept of collisions, but it is not a secure hashing algorithm itself.",
    "prosTitle": "Advantages of Bijective Base-6",
    "prosIntro": "The zero-less nature of this system provides several unique benefits, especially in computing and human-readable identifiers.",
    "pros": [
        { "title": "Unambiguous & Human-Friendly", "desc": "No leading zeros means no confusion. <code>123</code> is always <code>123</code>, never <code>0123</code>. This is ideal for product codes, serial numbers, or short links where clarity is critical." },
        { "title": "Compact & Efficient", "desc": "Every possible string of digits is a valid number, making it a highly dense and efficient way to represent data. There are no wasted or invalid combinations." },
        { "title": "Natural Fit for Computing", "desc": "The one-to-one mapping is ideal for algorithms needing unique identifiers, like indexing complex data structures or generating keys in distributed systems." },
        { "title": "A Parallel to Null-Free Systems", "desc": "The concept of every string being a valid number offers an interesting parallel to modern programming's goal of eliminating null references. Since there's no 'empty' or 'null' representation, it provides a tangible way to think about systems where every state is valid, a key idea in building more robust software." },
        { "title": "Intuitive High-Range Finger Counting", "desc": "While binary finger counting allows for counting up to 1023, it can be abstract. Bijective base-6 offers a more intuitive method to count beyond 10. By using one hand for digits 1-6 (e.g., a fist for 6) and the other to track 'rollovers', you can easily represent numbers up to 42 in a way that's simpler for many people to visualize and track." }
    ],
    "consTitle": "Disadvantages and Trade-offs",
    "consIntro": "While powerful, the system is not widely used for general arithmetic for a few key reasons.",
    "cons": [
        { "title": "Unfamiliar Arithmetic", "desc": "The rules for carrying and borrowing in addition and subtraction are different from the decimal system, making mental math and manual calculations challenging for most people." },
        { "title": "Conversion Overhead", "desc": "It's not a native system for computers (which use binary) or humans (who use decimal). A conversion step is always required when interfacing with other systems, adding computational overhead." },
        { "title": "Limited Native Support", "desc": "Very few programming languages or standard libraries have built-in functions for bijective numeration. This means developers must implement custom logic for all arithmetic and conversion operations." },
        { "title": "Complex Multiplication Patterns", "desc": "Unlike standard bases where multiplying by the base simply adds a zero, the patterns in bijective multiplication are less intuitive, making it harder to perform quick estimations or calculations." }
    ],
    "practiceTitle": "Practice Mode",
    "practiceDesc": "Test your skills against the clock! Choose a difficulty and solve the problems.",
    "difficultyLabel": "Difficulty:",
    "difficultyEasy": "Easy",
    "difficultyMedium": "Medium",
    "difficultyHard": "Hard",
    "quizQuestion": "What is",
    "quizTypeConversion": "Conversion",
    "quizTypeMath": "Math",
    "quizQuestionConversionSuffix": "in Bijective Base-6?",
    "quizAnswerPlaceholder": "Your answer...",
    "quizSubmitBtn": "Submit",
    "quizCorrectFeedback": "Correct! ðŸŽ‰",
    "quizIncorrectFeedback": "Not quite! The correct answer was",
    "quizNextBtn": "Next Question",
    "timeLabel": "Time:",
    "githubLink": "Project source available on",
    "licenseLink": "Released under the",
    "ui_loading": "Loading...",
    "errorBothNumbers": "Please enter both numbers.",
    "errorGeneric": "Error:"
}
