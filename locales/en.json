{
    "pageTitle": "Bijective Base-6 Calculator & Explorer",
    "pageDescription": "An interactive educational tool to calculate and explore the bijective base-6 number system, which has no zero.",
    "themeSwitcherLabel": "Toggle theme",
    "mainTitle": "Bijective Base-6 Calculator & Explorer",
    "tabCalculator": "Calculator & Explorer",
    "tabPractice": "Practice",
    "tabProsCons": "Pros & Cons",
    "tabTables": "Reference Tables",
    "liveConverterTitle": "Live Conversion Explorer",
    "liveConverterDesc": "Enter a decimal number to see its real-time representation across different systems.",
    "decimalInputLabel": "Enter a Decimal Number:",
    "decimalInputPlaceholder": "e.g., 25",
    "calculatorTitle": "Bijective Math Calculator",
    "calculatorDesc": "Enter two bijective base-6 numbers to see the results for all operations.",
    "num1Placeholder": "First number",
    "num2Placeholder": "Second number",
    "calculateBtn": "Calculate All Operations",
    "resultsTitle": "Results",
    "practiceTitle": "Practice Mode",
    "practiceDesc": "Test your skills! Choose a difficulty and what to practice.",
    "difficultyLabel": "Difficulty Level:",
    "difficultyEasy": "Easy",
    "difficultyMedium": "Medium",
    "difficultyHard": "Hard",
    "quizModeConversions": "Conversions",
    "quizModeArithmetic": "Arithmetic",
    "quizAnswerPlaceholder": "Answer...",
    "quizQuestionConversion": "What is {number} in bijective base-6?",
    "quizQuestionArithmetic": "What is {num1} {op} {num2}?",
    "prosConsTitle": "Pros & Cons for Software Engineering",
    "prosTitle": "Advantages (Pros)",
    "prosList": [
        "<strong>Unambiguous IDs:</strong> Every integer has exactly one representation. This eliminates bugs from leading zeros (e.g., <code>007</code> vs <code>7</code>) in identifiers, configuration files, or API endpoints.",
        "<strong>Naturally Sortable:</strong> The lexicographical order of bijective strings matches their numerical order. This simplifies sorting and indexing operations without special handling.",
        "<strong>No Null Pointer Equivalent:</strong> In a theoretical bijective-native system, since address 1 is the first valid address, the concept of a 'null pointer exception' caused by accessing address 0 would be fundamentally eliminated."
    ],
    "consTitle": "Disadvantages (Cons)",
    "consList": [
        "<strong>Unfamiliar Algorithms:</strong> Standard arithmetic algorithms for addition, subtraction, and especially multiplication and division do not work directly and must be reimplemented.",
        "<strong>Zero Representation:</strong> The concept of zero as an empty string can be counter-intuitive.",
        "<strong>Interoperability Cost:</strong> Requires conversion to and from standard systems (like binary or decimal) when interacting with any other conventional software, database, or OS."
    ],
    "additionTableTitle": "Addition Table (1 to 12)",
    "multiplicationTableTitle": "Multiplication Table (1 to 12)",
    "darkSecretTitle": "The Philosophical Implication of a Zero-less World",
    "darkSecretDesc": "The absence of zero is not just a curiosity; it has profound philosophical implications. In our mathematics, zero represents both a quantity (nothing) and a concept (the origin). A bijective system has no symbol for nothingness. The number zero is represented by the empty stringâ€”the absence of symbols. This implies a universe where the concept of 'nothing' isn't a state to be represented, but a true void. In computation, this means there is no 'null' address, potentially eliminating an entire class of common programming errors at a fundamental level.",
    "githubLink": "Project source available on",
    "licenseLink": "Released under the"
}
